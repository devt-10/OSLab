Q1. C program to block parent until child completes using wait system call :

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t child_pid;

    child_pid = fork();

    if (child_pid == 0) {
        printf("Child process\n");
    } else {
        wait(NULL); // Parent blocks until child completes
        printf("Parent process\n");
    }

    return 0;
}

output:

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <errno.h> // Include errno for error handling

int main()
{
        char dirname[256]; // Increase the size of dirname to handle longer directory names
        DIR *p;
        struct dirent *d;
        printf("Enter directory name: ");
        scanf("%255s", dirname); // Limit the input size to prevent buffer overflow
        p = opendir(dirname);
        if (p == NULL)
        {
                perror("Cannot open directory"); // Change the error message
                exit(EXIT_FAILURE);
        }
        while ((d = readdir(p)) != NULL)
        {
                printf("%s\n", d->d_name);
        }

        closedir(p); // Close the directory when done
        return 0;
}./a.out


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Q2. C program to display process IDs of parent and child :

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main()
{
// fork() Create a child process
int pid = fork();
if (pid > 0) 
{
 	printf("I am Parent process\n");
 	printf("ID : %d\n\n", getpid());}
else if (pid == 0) 
{
	 printf("I am Child process\n");
	// getpid() will return process id of child process
 	printf("ID: %d\n", getpid()); }
else 
{
 	printf("Failed to create child process");
}
return 0;
}

output:
gcc q2.c
./a.out

I am Parent process                             
ID : 29573

I am Child process
ID: 29574

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Q3. C program to accept and sort an array in parent and child processes :

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {9, 4, 7, 1, 8, 3};
    int n = sizeof(arr) / sizeof(arr[0]);

    pid_t child_pid = fork();

    if (child_pid == 0) {
        printf("Child Process - Unsorted Array: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");

        bubbleSort(arr, n);

        printf("Child Process - Sorted Array: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
    } else {
        printf("Parent Process\n");
    }

    return 0;
}

output:
gcc q3.c
./a.out

Parent Process
Child Process - Unsorted Array: 9 4 7 1 8 3
Child Process - Sorted Array: 1 3 4 7 8 9

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Q4. C program to create an orphan process :

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
int main()
{
        pid_t pid = fork();
        switch(pid)
        {
                case -1:
                        printf("Error in creating child process\n");
                        break;
                case 0:
                        sleep(5);
                        printf("Child Process executing\n");

                        printf("Process id:%d\n",getpid());
                        break;

                default:
                        printf("Parent Process executing\n");
                        printf("Process id:%d\n",getpid());
                        exit(0);
        }
        return 0;
}

output:
gcc q3.c
./a.out
Parent Process executing
Process id:43264

Child Process executing
Process id:44152
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Q5. Write a C program to simulate ls command

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <errno.h> // Include errno for error handling

int main()
{
        char dirname[256]; // Increase the size of dirname to handle longer directory names
        DIR *p;
        struct dirent *d;
        printf("Enter directory name: ");
        scanf("%255s", dirname); // Limit the input size to prevent buffer overflow
        p = opendir(dirname);
        if (p == NULL)
        {
                perror("Cannot open directory"); // Change the error message
                exit(EXIT_FAILURE);
        }
        while ((d = readdir(p)) != NULL)
        {
                printf("%s\n", d->d_name);
        }

        closedir(p); // Close the directory when done
        return 0;
}

output:
gcc q3.c
./a.out

Enter directory name: test
.
f1
..
f3
f2
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++